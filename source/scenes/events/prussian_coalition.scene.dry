title: Prussian Government Collapses
subtitle: Our coalition partners are dissolving the Prussian government.
view-if: ((z_relation < 40 and z_leader == "Kaas") or (z_relation < 30 and z_leader == "Joos") or (ddp_relation < 40 and ddp_ideology == "Right") or (ddp_relation < 35 and ddp_ideology == "Moderate") or (ddp_relation < 30 and ddp_ideology == "Left" and ddp_cohesion < 8)) and dvp_in_prussia == 0 and not (year == 1928 and month < 6) and not (year >= 1932 and month >= 4) and not kvp_formed
on-arrival: z_relation -= 4; ddp_relation -= 4; coalition_dissent += 2 if not in_left_front
new-page: true
tags: event
max-visits: 1
face-image: img/weimar_coalition.jpg

= Democratic Bulwark Dismantled

We have somehow antagonized the parties involved in the <span style="color: #000000;">We</span><span style="color: #DD0000;">im</span><span style="color: #FFCC00;">ar</span> Coalition ruling over Prussia, and our coalition partners have called a vote of no confidence against us. 

The only alternative coalition that can be formed with the current composition of the state parliament is a broad right-wing coalition, ranging from the <span style="color: #000000;">Center</span> to the <span style="color: #3E88B3;">**DNVP**</span>. [? if dnvp_ideology == "Radical" and dnvp_leader != "Westarp": However, this is heavily unlikely with the <span style="color: #3E88B3;">**DNVP**</span>'s all-or-nothing stance on governance. ?] If a coalition is unable to be formed, new elections will be called.

- @right_coalition_formed
- @center_right_coalition_formed
- @progressive_coalition
- @new_elections: New elections will be called.


@right_coalition_formed
title: A Bürgerblock is formed.
subtitle: <span style="color: #000000;">**Z**</span> + <span style="color: #A2D8E0;">**BVP**</span> + <span style="color: #C0A054;">**DVP**</span> + <span style="color: #3E88B3;">**DNVP**</span> + **Others** (50%)
view-if: dnvp_ideology == "Moderate" or dnvp_leader == "Westarp"
on-arrival: right_in_prussia = 1; spd_in_prussia = 0; new_middle_spd -= 4; old_middle_spd -= 4; workers_spd -= 2; catholics_spd -= 2; rural_spd -= 2; ddp_r_prussiaight += 3; ddp_cohesion -= 3

A right coalition is formed, albeit with an extremely narrow majority. 

It won't take long for the government to collapse and for us to take power through new elections.

@center_right_coalition_formed
title: A Bürgerblock is formed.
subtitle: <span style="color: #000000;">**Z**</span> + <span style="color: #A2D8E0;">**BVP**</span> + <span style="color: #D3C24D;">**[+ ddp_name +]**</span> + <span style="color: #C0A054;">**DVP**</span> + **Others** + <span style="color: #3E88B3;">**DNVP**</span> (54.9%)
view-if: dnvp_ideology == "Moderate" and dnvp_leader != "Westarp"
on-arrival: right_in_prussia = 1; spd_in_prussia = 0; new_middle_spd -= 4; old_middle_spd -= 4; workers_spd -= 2; catholics_spd -= 2; rural_spd -= 2; ddp_r_prussiaight += 3; ddp_cohesion -= 3

A center-right coalition is formed. 

It won't take long for the government to collapse and for us to take power through new elections.

@progressive_coalition
title: A progressive coalition is formed.
view-if: ddp_relation >= 60 and ddp_ideology == "Left" and (kpd_relation >= 60 and kpd_leader == "Thälmann") or (kpd_relation >= 40 and kpd_leader == "Conciliators")
unavailable-subtitle: What...?
choose-if: ohio_skibidi_rizz_sigma == 69
on-arrival: workers_spd = 100; secret_mode = 1

Data miners are heartless creatures

@new_elections
on-arrival: {!
for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized_prussia'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}
// calculate support for each of the parties
var total_support = 0; 
for (var party of Q.parties) {
    var party_support = 0;
    for (var c of Q.classes) {
        if (Q.old_demographics) { 
            party_support += Q[c]*Q[c+'_'+party];
        } else  { 
            party_support += Q[c]*Q[c+'_'+party+'_normalized_prussia'];
        } 
    }
    Q[party + '_support'] = party_support;
    total_support += party_support; 
}
// 2. normalize support (fraction)
for (var party of Q.parties) {
    Q[party+'_normalized_prussia'] = Q[party + '_support']/total_support;
    Q[party+'_votes_prussia'] = Math.round(Q[party+'_normalized_prussia']*1000)/ 10;
}

var new_party_sum = 0;
for (var party of Q.parties) {
    Q['old_' + party + '_r_prussia'] = Q[party + '_r_prussia'];
    if (Q.constitutional_reform > 0) {
        if (Q[party + '_votes_prussia'] < Q.electoral_threshold || (Q.electoral_threshold > 1 && party == 'other') || Q[party + '_banned']) {
            Q[party + '_r_prussia'] = 0;
        } else {
            Q[party + '_r_prussia'] = Q[party + '_votes_prussia'];
        }
        new_party_sum += Q[party + '_r_prussia'];
    } else {
        Q[party + '_r_prussia'] = Q[party + '_votes_prussia'];
    }
    Q['change_' + party + '_r_prussia'] = Q[party + '_r_prussia'] - Q['old_' + party + '_r_prussia'];
    Q['change_' + party + '_votes_prussia'] = Q[party + '_votes_prussia'] - Q['previous_' + party + '_last_election_votes_prussia'];
    if (Q['previous_' + party + '_last_election_votes_prussia'] === undefined) {
        Q['change_' + party + '_votes_prussia'] = Q[party + '_votes_prussia'];
    }
    var sign = Q['change_' + party + '_r_prussia'] > 0 ? '<img src="img/arrowup.jpg"> ' : Q['change_' + party + '_r_prussia'] < 0 ? '<img src="img/arrowdown.jpg"> ' : '<img src="img/steady.jpg"> ';
    var sign2 = Q['change_' + party + '_votes_prussia'] > 0 ? '<img src="img/arrowup.jpg"> ' : Q['change_' + party + '_votes_prussia'] < 0 ? '<img src="img/arrowdown.jpg"> ' : '<img src="img/steady.jpg"> ';
    Q['change_' + party + '_r_prussia'] = Math.abs(Q['change_' + party + '_r_prussia']);
    Q['change_' + party + '_votes_prussia'] = Math.abs(Q['change_' + party + '_votes_prussia']);
    Q['str_change_' + party + '_prussia'] = sign + parseFloat(Q['change_' + party + '_r_prussia']).toFixed(1);
    Q['str_votes_change_' + party + '_prussia'] = sign2 + parseFloat(Q['change_' + party + '_votes_prussia']).toFixed(1);
}
// calculate new party sum if electoral reform
if (Q.electoral_threshold && Q.electoral_threshold > 0) {
    for (var party of Q.parties) {
        if (Q[party + '_r_prussia'] > 0) {
            Q[party + '_r_prussia'] = Math.round((Q[party + '_r_prussia'] * 100 / new_party_sum) * 10) / 10;
        }
        Q['change_' + party + '_r_prussia'] = Q[party + '_r_prussia'] - Q['old_' + party + '_r_prussia'];
        Q['change_' + party + '_votes_prussia'] = Q[party + '_votes_prussia'] - Q['previous_' + party + '_last_election_votes_prussia'];
        if (Q['previous_' + party + '_last_election_votes_prussia'] === undefined) {
            Q['change_' + party + '_votes_prussia'] = Q[party + '_votes_prussia'];
        }
        var sign = Q['change_' + party + '_r_prussia'] > 0 ? '<img src="img/arrowup.jpg"> ' : Q['change_' + party + '_r_prussia'] < 0 ? '<img src="img/arrowdown.jpg"> ' : '<img src="img/steady.jpg"> ';
        var sign2 = Q['change_' + party + '_votes_prussia'] > 0 ? '<img src="img/arrowup.jpg"> ' : Q['change_' + party + '_votes_prussia'] < 0 ? '<img src="img/arrowdown.jpg"> ' : '<img src="img/steady.jpg"> ';
        Q['change_' + party + '_r_prussia'] = Math.abs(Q['change_' + party + '_r_prussia']);
        Q['change_' + party + '_votes_prussia'] = Math.abs(Q['change_' + party + '_votes_prussia']);
        Q['str_change_' + party + '_prussia'] = sign + parseFloat(Q['change_' + party + '_r_prussia']).toFixed(1);
        Q['str_votes_change_' + party + '_prussia'] = sign2 + parseFloat(Q['change_' + party + '_votes_prussia']).toFixed(1);
    }
}

for (var party of Q.parties) {
    Q[party + '_last_election_votes_prussia'] = parseFloat(Q[party + '_votes_prussia']).toFixed(1);
    Q['previous_' + party + '_last_election_votes_prussia'] = parseFloat(Q[party + '_last_election_votes_prussia']).toFixed(1);
}

for (var party of Q.parties) {
    var original_value = Q.other_r_prussia

if (Q.other_r_prussia > 0 && Q.other_votes === Q.other_r_prussia) {
    if (Q.year === 1928 && Q.dnvp_leader === "Hugenberg" || Q.dnvp_leader === "Westarp") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.75 * 10) / 10;
    } else if (Q.year === 1929 && Q.dnvp_leader === "Hugenberg") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.8 * 10) / 10;
    } else if (Q.year === 1930 && Q.dnvp_leader === "Hugenberg") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.9 * 10) / 10;
    } else if (Q.year === 1931 && Q.dnvp_leader === "Hugenberg") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.8 * 10) / 10;
    } else if (Q.year >= 1932 && Q.dnvp_leader === "Hugenberg") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.6 * 10) / 10;
    } else if (Q.year >= 1928 && Q.dnvp_leader === "Triumvirate") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.75 * 10) / 10;
    } else if (Q.year === 1928 && Q.dnvp_ideology === "Moderate") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.65 * 10) / 10;
    } else if (Q.year === 1929 && Q.dnvp_ideology === "Moderate") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.7 * 10) / 10;
    } else if (Q.year === 1930 && Q.dnvp_ideology === "Moderate") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.75 * 10) / 10;
    } else if (Q.year === 1931 && Q.dnvp_ideology === "Moderate") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.7 * 10) / 10;
    } else if (Q.year >= 1932 && Q.dnvp_ideology === "Moderate") {
        Q.other_r_prussia = Math.round(Q.other_r_prussia * 0.6 * 10) / 10;
    }

     Q.other_r_prussia = Math.max(0, Q.other_r_prussia);
     Q.other_r_prussia_before = Q.other_r_prussia
        var reichstag_without_other = 100 - Q.other_r_prussia;
        var other_party_sum = ((reichstag_without_other) - (Q.other_votes - Q.other_r_prussia));
    }
}
for (var party of Q.parties) {
    if (other_party_sum > 0) {
        Q[party + '_r_prussia'] = Math.round((Q[party + '_r_prussia'] * reichstag_without_other / other_party_sum) * 10) / 10;
        console.log(Q.other_r_prussia)
    }
    if (Q.electoral_threshold == 0) {
        Q.other_r_prussia = Q.other_r_prussia_before
    }
    Q['change_' + party + '_r_prussia'] = Q[party + '_r_prussia'] - Q['old_' + party + '_r_prussia'];
    var sign = Q['change_' + party + '_r_prussia'] > 0 ? '<img src="img/arrowup.jpg"> ' : Q['change_' + party + '_r_prussia'] < 0 ? '<img src="img/arrowdown.jpg"> ' : '<img src="img/steady.jpg"> ';
    Q['change_' + party + '_r_prussia'] = Math.abs(Q['change_' + party + '_r_prussia']);
    Q['str_change_' + party + '_prussia'] = sign + parseFloat(Q['change_' + party + '_r_prussia']).toFixed(1);
}
for (var party of Q.parties) {
    for (var c of Q.classes) {
        Q[c + "_change_" + party + '_normalized_prussia'] = Q[c + '_' + party + '_normalized_prussia'] - Q['old_' + c + '_' + party + '_normalized_prussia'];
        var sign3 = Q[c + "_change_" + party + '_normalized_prussia'] > 0 ? '+' : '';
        Q['demo_change_' + c + '_' + party + '_normalized_prussia'] = sign3 + parseFloat(Q[c + "_change_" + party + '_normalized_prussia']).toFixed(0);
        Q['old_' + c + '_' + party + '_normalized_prussia'] = Q[c + '_' + party + '_normalized_prussia'];
    }
}
Q.z_minus_bvp_r = parseFloat((Q.z_r_prussia - 3).toFixed(1));
Q.z_minus_bvp_votes = parseFloat((Q.z_votes_prussia - 3).toFixed(1));

Q.largest_party = 'SPD';
if (Q.nsdap_r_prussia >= Q.spd_r_prussia && Q.nsdap_r_prussia >= Q.kpd_r_prussia) {
    Q.largest_party = 'NSDAP';
}
if (Q.kpd_r_prussia >= Q.spd_r_prussia && Q.kpd_r_prussia >= Q.nsdap_r_prussia) {
    Q.largest_party = 'KPD';
}

// coalitions
Q.weimar_coalition = parseFloat((Q.spd_r_prussia + Q.ddp_r_prussia + Q.z_r_prussia - 3).toFixed(1));

Q.grand_coalition = parseFloat((Q.spd_r_prussia + Q.ddp_r_prussia + Q.z_r_prussia + Q.dvp_r_prussia).toFixed(1));

if (Q.kvp_formed) {
    Q.bourgeois_coalition = parseFloat((Q.ddp_r_prussia + Q.z_r_prussia + Q.dvp_r_prussia + Q.other_r_prussia + Q.kvp_r_prussia).toFixed(1));
} else {
    Q.bourgeois_coalition = parseFloat((Q.ddp_r_prussia + Q.z_r_prussia + Q.dvp_r_prussia + Q.other_r_prussia).toFixed(1));
}

if (Q.kvp_formed) {
    Q.center_right_coalition = parseFloat((Q.z_r_prussia + Q.ddp_r_prussia + Q.dvp_r_prussia + Q.other_r_prussia + Q.dnvp_r_prussia + Q.kvp_r_prussia).toFixed(1));
} else {
    Q.center_right_coalition = parseFloat((Q.z_r_prussia + Q.ddp_r_prussia + Q.dvp_r_prussia + Q.other_r_prussia + Q.dnvp_r_prussia).toFixed(1));
}

Q.right_coalition = parseFloat((Q.z_r_prussia + Q.dvp_r_prussia + Q.other_r_prussia + Q.dnvp_r_prussia).toFixed(1));

if (Q.dnvp_ideology === "Moderate") {
    Q.far_right_coalition = parseFloat((Q.dnf_r_prussia + Q.nsdap_r_prussia).toFixed(1));
} else {
    Q.far_right_coalition = parseFloat((Q.dnvp_r_prussia + Q.nsdap_r_prussia).toFixed(1));
}

Q.left_coalition = parseFloat((Q.spd_r_prussia + Q.kpd_r_prussia + Q.sapd_r_prussia).toFixed(1));

if (Q.liberal_parliament == 0) {
    Q.popular_front_coalition = parseFloat((Q.spd_r_prussia + Q.kpd_r_prussia + Q.z_r_prussia + Q.ddp_r_prussia - 3 + Q.sapd_r_prussia).toFixed(1));
} else {
    Q.popular_front_coalition = parseFloat((Q.spd_r_prussia + Q.kpd_r_prussia + Q.z_r_prussia - 3 + Q.sapd_r_prussia).toFixed(1));
}

if (Q.dnvp_ideology === "Moderate") {
    Q.anti_democratic_coalition = parseFloat((Q.kpd_r_prussia + Q.nsdap_r_prussia + Q.dnf_r_prussia).toFixed(1));
} else {
    Q.anti_democratic_coalition = parseFloat((Q.kpd_r_prussia + Q.nsdap_r_prussia + Q.dnvp_r_prussia).toFixed(1));
}

Q.neo_weimar_coalition = parseFloat((Q.spd_r_prussia + Q.ddp_r_prussia + Q.z_r_prussia + Q.dvp_r_prussia + Q.other_r_prussia).toFixed(1));

if (Q.kvp_formed) {
    Q.cordon_sanitaire = parseFloat((Q.spd_r_prussia + Q.ddp_r_prussia + Q.z_r_prussia + Q.dvp_r_prussia + Q.other_r_prussia + Q.kvp_r_prussia).toFixed(1));
} else {
    Q.cordon_sanitaire = parseFloat((Q.spd_r_prussia + Q.ddp_r_prussia + Q.z_r_prussia + Q.dvp_r_prussia + Q.other_r_prussia + Q.dnvp_r_prussia).toFixed(1));
}

// Q.hitler_right_coalition = parseFloat((Q.z_r_prussia + Q.dnvp_r_prussia + Q.nsdap_r_prussia).toFixed(1));

Q.progressive_coalition = parseFloat((Q.spd_r_prussia + Q.kpd_r_prussia + Q.ddp_r_prussia + Q.sapd_r_prussia).toFixed(1));

if (Q.kpd_relation >= 30) {
    Q.weimar_coalition += Q.sapd_r_prussia;
}

var election_result = {'date': new Date(Q.year, Q.month - 1)};
for (var party of Q.parties) {
    election_result[party] = Q[party + '_r_prussia'];
}
Q.election_records.push(election_result);
Q.prussian_elections_called += 1;
!}
on-display: {!
data = [{
    "id": "kpd",
    "legend": "KPD",
    "name": "KPD",
    "seats": Math.round(Q.kpd_r_prussia * 4.5),
}];

if (Q.sapd_formed && Q.sapd_r_prussia) {
    data.push({
        "id": "sapd",
        "legend": "SAPD",
        "name": "SAPD",
        "seats": Math.round(Q.sapd_r_prussia * 4.5),
    });
}

data = data.concat([{
    "id": "spd",
    "legend": "SPD",
    "name": "SPD",
    "seats": Math.round(Q.spd_r_prussia * 4.5),
}]);

if (Q.ddp_r_prussia) {
    data.push({
        "id": "ddp",
        "legend": "DDP",
        "name": "DDP",
        "seats": Math.round(Q.ddp_r_prussia * 4.5),
    });
}

data = data.concat([{
        "id": "z",
        "legend": "Center",
        "name": "Center",
        "seats": Math.round((Q.z_r_prussia - 3) * 4.5),
    },
    {
        "id": "bvp",
        "legend": "BVP",
        "name": "BVP",
        "seats": Math.round(3 * 4.5),
    }
]);

if (Q.dvp_r_prussia) {
    data.push({
        "id": "dvp",
        "legend": "DVP",
        "name": "DVP",
        "seats": Math.round(Q.dvp_r_prussia * 4.5),
    });
}

if (Q.other_r_prussia) {
    data.push({
        "id": "other",
        "legend": "Other",
        "name": "Other",
        "seats": Math.round(Q.other_r_prussia * 4.5),
    });
}

if (Q.kvp_formed && Q.kvp_r_prussia) {
    data.push({
        "id": "kvp",
        "legend": "KVP",
        "name": "KVP",
        "seats": Math.round(Q.kvp_r_prussia * 4.5),
    });
}

data = data.concat([{
    "id": "dnvp",
    "legend": "DNVP",
    "name": "DNVP",
    "seats": Math.round(Q.dnvp_r_prussia * 4.5),
}]);
if (Q.dnf_formed && Q.dnf_r_prussia) {
    data.push({
        "id": "dnf",
        "legend": "DNF",
        "name": "DNF",
        "seats": Math.round(Q.dnf_r_prussia * 4.5),
    });
}
data = data.concat([{
    "id": "nsdap",
    "legend": "NSDAP",
    "name": "NSDAP",
    "seats": Math.round(Q.nsdap_r_prussia * 4.5),
}, ]);

if (window && d3) {
    var width = 500;
    var height = 500;
    var screenWidth = document.getElementById('content').offsetWidth;
    if (screenWidth < width - 50) {
        width = screenWidth - 50;
        height = width;
        document.getElementById("reichstag").style.height = screenWidth/2 + "px";
    }
    var parliament = d3.parliament();
    parliament.width(width).height(height).innerRadiusCoef(0.4);
    parliament.enter.fromCenter(true).smallToBig(true);
    parliament.exit.toCenter(false).bigToSmall(true);
    d3.select("#reichstag").datum(data).call(parliament);

    var lines = d3.linegraph(false, false,
            Q.parties,
            {'spd': '#E3000F', 'kpd': '#700000', 'ddp': '#D3C24D', 'z': '#000', 'dvp': '#D5AC27', 'dnvp': '#3E88B3', 'nsdap': '#7A3C00', 'other': '#a0a0a0', 'sapd': '#9B0000', 'dnf': '#003755', 'kvp': '#0087DC'},
            {'spd': 'SPD', 'kpd': 'KPD', 'ddp': Q.ddp_name, 'z': Q.z_party_name + ' + BVP', 'dvp': 'DVP', 'dnvp': 'DNVP', 'nsdap': 'NSDAP', 'other': 'Others', 'sapd': 'SAPD', 'dnf': 'DNF', 'kvp': 'KVP'});
    lines.width(width).height(400);
    //var svg = lines(Q.election_records);
    d3.select("#election_history").datum(Q.election_records).call(lines);
    //document.getElementById('election_history').innerHTML = svg.outerHTML;

    // party support records should not have so many ticks
    if (!Q.historical_mode) {
        var lines_2 = d3.linegraph(true, true,
            Q.parties,
            {'spd': '#E3000F', 'kpd': '#700000', 'ddp': '#D3C24D', 'z': '#000', 'dvp': '#D5AC27', 'dnvp': '#3E88B3', 'nsdap': '#7A3C00', 'other': '#a0a0a0', 'sapd': '#9B0000', 'dnf': '#003755', 'kvp': '#0087DC'},
            {'spd': 'SPD', 'kpd': 'KPD', 'ddp': Q.ddp_name, 'z': Q.z_party_name + ' + BVP', 'dvp': 'DVP', 'dnvp': 'DNVP', 'nsdap': 'NSDAP', 'other': 'Others', 'sapd': 'SAPD', 'dnf': 'DNF', 'kvp': 'KVP'});
        lines_2.width(width).height(400);
        d3.select("#party_support_history").datum(Q.party_support_records).call(lines_2);
    }
}
!}
go-to: coalitions_menu

**Election results:**

{!<svg id="reichstag" style="width: 500px; height: 250px;"> </svg>!}

{!<table>!} 
{!<tr><td>Party</td><td>Vote share</td><td>% Change</td><td>Reichstag Seats</td><td>% Change</td></tr>!}
{!<tr><td><div class="box" style='background-color:#E3000F; outline: 2px; outline-style: solid;'> </div> !} **SPD:** {!</td><td>!} **[+ spd_votes_prussia +]%** {!</td><td>!} **[+ str_votes_change_spd +]** {!</td><td>!} **[+ spd_r_prussia +]%** {!</td><td>!} **[+ str_change_spd +]** {!</td></tr>!}

[? if sapd_formed : {!<tr><td><div class="box" style='background-color:#9B0000'> </div> !}SAPD: {!</td><td>!} [+ sapd_votes_prussia +]% {!</td><td>!} [+ str_votes_change_sapd +] {!</td><td>!} [+ sapd_r_prussia +]% {!</td><td>!} [+ str_change_sapd +] {!</td></tr>!} ?]

{!<tr><td><div class="box" style='background-color:#700000'> </div> !}KPD: {!</td><td>!} [+ kpd_votes_prussia +]% {!</td><td>!} [+ str_votes_change_kpd +] {!</td><td>!} [+ kpd_r_prussia +]% {!</td><td>!} [+ str_change_kpd +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#D3C24D'> </div> !} [+ ddp_name +]: {!</td><td>!} [+ ddp_votes_prussia +]% {!</td><td>!} [+ str_votes_change_ddp +] {!</td><td>!} [+ ddp_r_prussia +]% {!</td><td>!} [+ str_change_ddp +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#000'> </div> !} Z: {!</td><td>!} [+ z_minus_bvp_votes_prussia +]% {!</td><td>!} [+ str_votes_change_z +] {!</td><td>!} [+ z_minus_bvp_r +]% {!</td><td>!} [+ str_change_z +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#D5AC27'> </div> !} DVP: {!</td><td>!} [+ dvp_votes_prussia +]% {!</td><td>!} [+ str_votes_change_dvp +] {!</td><td>!} [+ dvp_r_prussia +]% {!</td><td>!} [+ str_change_dvp +] {!</td></tr>!}
 
{!<tr><td><div class="box" style='background-color:#a0a0a0'> </div> !} Others: {!</td><td>!} [+ other_votes_prussia +]% {!</td><td>!} [+ str_votes_change_other +] {!</td><td>!} [+ other_r_prussia +]% {!</td><td>!} [+ str_change_other +] {!</td></tr>!}

[? if kvp_formed : {!<tr><td><div class="box" style='background-color:#0087DC'> </div> !}KVP: {!</td><td>!} [+ kvp_votes_prussia +]% {!</td><td>!} [+ str_votes_change_kvp +] {!</td><td>!} [+ kvp_r_prussia +]% {!</td><td>!} [+ str_change_kvp +] {!</td></tr>!} ?]

{!<tr><td><div class="box" style='background-color:#3E88B3'> </div> !} DNVP: {!</td><td>!} [+ dnvp_votes_prussia +]% {!</td><td>!} [+ str_votes_change_dnvp +] {!</td><td>!} [+ dnvp_r_prussia +]% {!</td><td>!} [+ str_change_dnvp +] {!</td></tr>!}

[? if dnf_formed : {!<tr><td><div class="box" style='background-color:#003755'> </div> !}DNF: {!</td><td>!} [+ dnf_votes_prussia +]% {!</td><td>!} [+ str_votes_change_dnf +] {!</td><td>!} [+ dnf_r_prussia +]% {!</td><td>!} [+ str_change_dnf +] {!</td></tr>!} ?]

{!<tr><td><div class="box" style='background-color:#7A3C00'> </div> !} NSDAP: {!</td><td>!} [+ nsdap_votes_prussia +]% {!</td><td>!} [+ str_votes_change_nsdap +] {!</td><td>!} [+ nsdap_r_prussia +]% {!</td><td>!} [+ str_change_nsdap +] {!</td></tr>!}
{!</table>!}

@coalitions_menu
on-arrival: 

Menu