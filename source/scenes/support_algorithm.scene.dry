title: Support Calculations
on-arrival: {!

// Every Tick Party Support Update Algorithm

const partyIds = [
  "nsdap", "llab", "centr", "rlab", "farm", "refrm", "neorev", "other"
];

// Global variables for unemployment and national democracy support
const unemployment = Q[".unemployment_rate"] ?? 0;
const nationalDemocracySupport = Q[".democracy_support_national"] ?? 50;

// Base decay rates for each demographic
const baseDecay = {
  old_middle: 0.01,
  new_middle: 0.015,
  unemployed: 0.02,
  rural: 0.015,
  workers: 0.02,
  catholics: 0.01
};

// Utility to calculate adjusted decay influenced by discipline & industrial backing
function adjustedDecay(base, discipline = 1, industrialBoost = 0) {
  let decay = base / (discipline + 0.1);
  decay *= (1 - 0.5 * (industrialBoost / 100)); // industrial backing slows decay
  return decay;
}

partyIds.forEach(partyId => {
  // Read current demographic supports with fallback defaults
  let oldMiddle = Q[".old_middle_" + partyId] ?? 50;
  let newMiddle = Q[".new_middle_" + partyId] ?? 50;
  let unemployed = Q[".unemployed_" + partyId] ?? 50;
  let rural = Q[".rural_" + partyId] ?? 50;
  let workers = Q[".workers_" + partyId] ?? 50;
  let catholics = Q[".catholics_" + partyId] ?? 50;

  // Read discipline and other party stats
  let oldMiddleDiscipline = Q["." + partyId + "_old_middle_discipline"] ?? 1;
  let newMiddleDiscipline = Q["." + partyId + "_new_middle_discipline"] ?? 1;
  let unemployedDiscipline = Q["." + partyId + "_unemployed_discipline"] ?? 1;
  let ruralDiscipline = Q["." + partyId + "_rural_discipline"] ?? 1;
  let workersDiscipline = Q["." + partyId + "_workers_discipline"] ?? 1;
  let catholicsDiscipline = Q["." + partyId + "_catholics_discipline"] ?? 1;

  let industrialBacking = Q["." + partyId + "_industrial_backing"] ?? 0;
  let elitism = Q["." + partyId + "_elitism"] ?? 0;
  let radicalSupport = Q["." + partyId + "_radical_support"] ?? 0;

  let democracySupport = Q["." + partyId + "_democracy_support"] ?? 50;

  // Targets could be dynamic; here we just have them tend to current support for stability
  let targetOldMiddle = oldMiddle;
  let targetNewMiddle = newMiddle;
  let targetUnemployed = unemployed;
  let targetRural = rural;
  let targetWorkers = workers;
  let targetCatholics = catholics;

  // Calculate decay for each demographic
  let decayOldMiddle = adjustedDecay(baseDecay.old_middle, oldMiddleDiscipline, industrialBacking);
  let decayNewMiddle = adjustedDecay(baseDecay.new_middle, newMiddleDiscipline, industrialBacking);
  let decayUnemployed = adjustedDecay(baseDecay.unemployed, unemployedDiscipline, industrialBacking);
  let decayRural = adjustedDecay(baseDecay.rural, ruralDiscipline, industrialBacking);
  let decayWorkers = adjustedDecay(baseDecay.workers, workersDiscipline, industrialBacking);
  let decayCatholics = adjustedDecay(baseDecay.catholics, catholicsDiscipline, industrialBacking);

  // Democracy effect multiplier based on party vs national democracy support
  let democracyEffect = (democracySupport - nationalDemocracySupport) / 100;

  // Elitism reduces unemployed's positive growth
  let unemploymentEffect = (1 - elitism / 100) * unemployment;

  // Radical boost to unemployed support based on unemployment rate and radical support stat
  let radicalismBoost = radicalSupport * (unemployment / 100);

  // Compute deltas (change) for each demographic support
  let deltaOldMiddle = (targetOldMiddle - oldMiddle) * decayOldMiddle * (1 + democracyEffect);
  let deltaNewMiddle = (targetNewMiddle - newMiddle) * decayNewMiddle * (1 + democracyEffect);
  let deltaUnemployed = (targetUnemployed + radicalismBoost - unemployed) * decayUnemployed * (1 + democracyEffect);
  if (deltaUnemployed > 0) deltaUnemployed *= (1 - unemploymentEffect); // Elitism blocks unemployed support increase
  let deltaRural = (targetRural - rural) * decayRural * (1 + democracyEffect);
  let deltaWorkers = (targetWorkers - workers) * decayWorkers * (1 + democracyEffect);
  let deltaCatholics = (targetCatholics - catholics) * decayCatholics * (1 + democracyEffect);

  // Update the support values
  oldMiddle += deltaOldMiddle;
  newMiddle += deltaNewMiddle;
  unemployed += deltaUnemployed;
  rural += deltaRural;
  workers += deltaWorkers;
  catholics += deltaCatholics;

  // Clamp values between 0 and 100
  Q[".old_middle_" + partyId] = Math.min(100, Math.max(0, oldMiddle));
  Q[".new_middle_" + partyId] = Math.min(100, Math.max(0, newMiddle));
  Q[".unemployed_" + partyId] = Math.min(100, Math.max(0, unemployed));
  Q[".rural_" + partyId] = Math.min(100, Math.max(0, rural));
  Q[".workers_" + partyId] = Math.min(100, Math.max(0, workers));
  Q[".catholics_" + partyId] = Math.min(100, Math.max(0, catholics));
});




!}
